#include "utility.h"
using namespace std;
#define NEGATIVE_INFINITY -858993460.0
#define POSITIVE_INFINITY 858993460.0
class Points {
private:
	float a;
	float b;
public:
	Points() {
		a = 0;
		b = 0;
	}
	Points(float a, float b) {
		this->a = a;
		this->b = b;
	}
	float A() {
		return a;
	}
	float B() {
		return b;
	}
};
float calculateError(vector<Points>points, float** X, float** Y, int x, int e, int
	n) {
	float sumab = 0.0;
	float sumb = 0.0;
	float sumasq = 0.0;
	float suma = 0.0;
	for (int i = x;i <= e;i++) {
		sumab = sumab + (points[i].A() * points[i].B());
		sumb = sumb + points[i].B();
		sumasq = sumasq + (points[i].A() * points[i].A());
		suma = suma + points[i].A();
	}
	float numerator = (float)n * sumab - (suma * sumb);
	float denominator = (float)n * sumasq - (suma * suma);
	float s = 0.0;
	if (numerator != 0 && denominator != 0) {
		s = (float)numerator / denominator;
	}
	float z = sumb - s * suma;
	z = (float)z / n;
	float distance = 0.0;
	for (int i = x;i <= e;i++) {
		float dist = (points[i].B() - (s * points[i].A() + z));
		distance = distance + dist * dist;
	}
	X[x][e] = s;
	Y[x][e] = z;
	return distance;
}
int main() {
	ifstream pointsFile;
	pointsFile.open("points.txt");
	vector<Points> pts;
	if (pointsFile) {
		float exp;
		while (pointsFile >> exp) {
			float a;
			pointsFile >> a;
			Points p(exp, a);pts.push_back(p);
		}
	}
	int length = pts.size();
	float c = 1;
	auto** x = new float* [length];
	auto** y = new float* [length];
	auto** err = new float* [length];
	for (int i = 0;i < length;++i) {
		x[i] = new float[length];
		y[i] = new float[length];
		err[i] = new float[length];
	}
	for (int i = 0;i < length;i++) {
		for (int j = i;j < length;j++) {
			if (i == j) {
				err[i][j] = 0;
			}
			else {
				err[i][j] = calculateError(pts, x, y, i, j, j - i + 1);
			}
		}
	}
	auto* N = new float[length + 1];
	int* index = new int[length + 1];
	N[0] = 0;
	N[1] = 0;
	index[0] = NEGATIVE_INFINITY;
	index[1] = NEGATIVE_INFINITY;
	for (int i = 1;i < length;++i) {
		float minimum = POSITIVE_INFINITY;
		int indice = -1;
		for (int j = 0;j < i;++j) {
			float cminimun = err[j][i] + c + N[j + 1];
			if (cminimun < minimum) {
				minimum = cminimun;
				indice = j;
			}
		}
		N[i + 1] = minimum;
		index[i + 1] = indice + 1;
	}
	cout << "i OPT(i) breakpoint j " << endl;
	for (int i = 0;i <= length;i++) {
		cout << i << " " << N[i] << " " << index[i] << endl;
	}
	int toPoint = length;
	int fromPoint = index[length];
	while (toPoint != -1 && fromPoint != NEGATIVE_INFINITY) {
		cout << "line of segment " << fromPoint << " through " << toPoint << "
			is y = " << x[fromPoint - 1][toPoint - 1] << " x = " << y[fromPoint - 1][toPoint - 1]
			<< endl;
		toPoint = fromPoint;
		fromPoint = index[toPoint];
	}
	return 0;
}
